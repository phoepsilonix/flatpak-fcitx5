#!/bin/bash

cleanup() {
    pkill -P $$
}

trap cleanup EXIT

SCRIPT_PATH="$(realpath "${BASH_SOURCE[-1]}")"
SCRIPT_DIRECTORY="$(dirname "$SCRIPT_PATH")"

set -e

# TMPDIR
[[ -z $TMPDIR ]] && TMPDIR=/tmp
BASE="$TMPDIR/update_mozc"

mkdir -p "$BASE"

cd "$BASE"
if [ ! -d mozc ]; then
    git clone --filter=tree:0 https://github.com/fcitx/mozc/
fi
[[ ! -d bcr ]] && git clone --filter=tree:0 https://github.com/bazelbuild/bazel-central-registry bcr
cd bcr
git fetch --all
git checkout origin/main
cd ..

cd mozc/src/
git fetch --all
git checkout origin/fcitx
git submodule update --init

_MOZC_BAZEL_CACHE="$BASE/mozc_cache"
_DOWNLOADER_CACHE="$BASE/downloader_cache"
BAZEL_MIRROR="$SCRIPT_DIRECTORY/bazel_mirror.py"

pushd .
mkdir -p "$_DOWNLOADER_CACHE"
cd "$_DOWNLOADER_CACHE"
python3 "$BAZEL_MIRROR" &
PROXY_PID=$!
popd
[[ -z $PROXY_PID ]] && exit 1

BUILD_TARGET="unix/fcitx5:fcitx5-mozc.so server:mozc_server gui/tool:mozc_tool"

# x86_64
echo bazel build --nobuild --experimental_downloader_config="$SCRIPT_DIRECTORY/downloader.cfg" --registry=file://$BASE/bcr --repository_cache="$_MOZC_BAZEL_CACHE" --config oss_linux --config release_build $BUILD_TARGET
bazel clean --expunge
bazel build --nobuild --experimental_downloader_config="$SCRIPT_DIRECTORY/downloader.cfg" --registry=file://$BASE/bcr --repository_cache="$_MOZC_BAZEL_CACHE" --config oss_linux --config release_build $BUILD_TARGET

# aarch64 emulation flatpak with qemu-user-static-binfmt
flatpak run --command=sh \
    --env=BASE="$BASE" \
    --env=TMPDIR="$TMPDIR" \
    --env=PKG_CONFIG_PATH=/app/lib/pkgconfig \
    --env=SCRIPT_DIRECTORY="$SCRIPT_DIRECTORY" \
    --env=_MOZC_BAZEL_CACHE="$_MOZC_BAZEL_CACHE" \
    --env=BUILD_TARGET="$BUILD_TARGET" \
    --share=network --filesystem=xdg-cache \
    --filesystem="$SCRIPT_DIRECTORY" --filesystem="$TMPDIR" \
    --runtime=org.kde.Sdk/aarch64/6.6 org.fcitx.Fcitx5/aarch64/stable -c "\
    PATH=$PATH:/usr/lib/sdk/bazel/bin:/usr/lib/sdk/llvm18/bin ; \
    CC=clang ; CXX=clang++ ; clang --version ; bazel --version ;\
    bazel clean --expunge ; \
    bazel build --nobuild --experimental_downloader_config="\$SCRIPT_DIRECTORY/downloader.cfg" \
    --registry=file://\$BASE/bcr \
    --repository_cache="\$_MOZC_BAZEL_CACHE" \
    --config oss_linux --config release_build \${BUILD_TARGET}
    "

kill $PROXY_PID

pushd .
cd $_DOWNLOADER_CACHE
for f in `find -type f` ; do
    if [[ ! "$f" =~ "./bcr.bazel.build/" ]];then
        url="https://${f#*/}"
        echo "- type: file"
        echo "  url: $url"
        echo "  dest: bazel-deps"
        sha=`sha256sum $f|cut -f1 -d" "`
        echo "  sha256: $sha"
    fi
done > $SCRIPT_DIRECTORY/mozc-deps.yaml
popd

# add only-arches for cpython x86_64 and aarch64
TMPFILE=$(mktemp)
yq eval '
  .[] |= (
    with(.url; 
      (split("/")[-1] | test("x86_64$")) as $_ 
      | parent | . += {"only-arches": ["x86_64"]}
    // ) 
    with(.url; 
      (split("/")[-1] | test("aarch64$")) as $_ 
      | parent | . += {"only-arches": ["aarch64"]}
    // ) 
    .  
  )
' "$SCRIPT_DIRECTORY/mozc-deps.yaml" > "$TMPFILE"
mv "$TMPFILE" "$SCRIPT_DIRECTORY/mozc-deps.yaml"

yq -i 'sort_by(.url)' "$SCRIPT_DIRECTORY/mozc-deps.yaml"

rm -rf "$BASE"
